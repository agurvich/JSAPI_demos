import{d2 as I,d4 as T,dg as $,dh as O,cT as E,cU as M,cV as R,cW as F,d3 as L,di as P,dj as U,cZ as j,dk as v,dl as f,dm as x,dn as q,dp as J,dq as N,aQ as b,aU as A,b8 as _,dr as k,a as S,a9 as V,e as a,y as n,ds as w,ba as Z,bA as z,d1 as W,c as B,ac as C,dt as D,du as G}from"./index-BqO8XNEn.js";import{f as H}from"./TemporalLayer-B1YThOMg.js";import{m as K}from"./ExportImageParameters-Dl68PP5C.js";import{e as Q}from"./versionUtils-w4eVBR_7.js";import"./floorFilterUtils-DZ5C6FQv.js";let r=class extends I(H(T($(O(E(M(R(F(L(P(U(C)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(j).then(()=>this._fetchService(s))),Promise.resolve(this)}readImageFormat(e,s){const p=s.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,s,p,t){var h,c,y;if(!this.loaded||!e)return;const i=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let l=!1;if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;l=x(i,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");l=x(i,g.sublayers,v(g.origin))}}const d=[],u={writeSublayerStructure:l,...t};let m=l;i.forEach(o=>{const g=o.write({},u);d.push(g),m=m||o.originOf("visible")==="user"}),d.some(o=>Object.keys(o).length>1)&&(s.layers=d),m&&(s.visibleLayers=i.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,s,p,t){const i=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new K({layer:this,floors:t==null?void 0:t.floors,scale:q({extent:e,width:s})*i}),d=l.toJSON();l.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},m=e==null?void 0:e.spatialReference,h=J(m);d.dpi*=i;const c={};if(t!=null&&t.timeExtent){const{start:y,end:o}=t.timeExtent.toJSON();c.time=y&&o&&y===o?""+y:`${y??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:s+","+p,...d,...u,...c}}async fetchImage(e,s,p,t){const{data:i}=await this._fetchImage("image",e,s,p,t);return i}async fetchImageBitmap(e,s,p,t){const{data:i,url:l}=await this._fetchImage("blob",e,s,p,t);return N(i,l,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const s={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await b(this.url,s),{extent:t,fullExtent:i,timeExtent:l}=p,d=t||i;return{fullExtent:d&&A.fromJSON(d),timeExtent:l&&_.fromJSON({start:l[0],end:l[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,s,p,t,i){var u,m,h;const l={responseType:e,signal:(i==null?void 0:i.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(s,p,t,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},d=this.parsedUrl.path+"/export";if(((u=l.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(m=this.capabilities)==null?void 0:m.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:c}=await b(d,l);return{data:c,url:d}}catch(c){throw V(c)?c:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${d}`,{error:c})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:s,ssl:p}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=s,this.read(s,{origin:"service",url:this.parsedUrl})}};a([n(w("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),a([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),a([n()],r.prototype,"dpi",void 0),a([n()],r.prototype,"gdbVersion",void 0),a([n()],r.prototype,"imageFormat",void 0),a([Z("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),a([n()],r.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),a([n(w("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),a([n()],r.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),a([z("sublayers",{layers:{type:[D]},visibleLayers:{type:[G]}})],r.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),a([n(W)],r.prototype,"url",void 0),r=a([B("esri.layers.MapImageLayer")],r);const se=r;export{se as default};
