import{eN as D,c0 as v,eO as d,$ as m,d_ as $,eP as h,eQ as y,eR as M,eS as O,eT as I}from"./index-BqO8XNEn.js";import{u as g,c as p,i as w,f as S}from"./PointCloudWorkerUtil-BxR2SMuL.js";import"./PointCloudUniqueValueRenderer-BDg5xxxq.js";class _{transform(t){const a=this._transform(t),e=[a.points.buffer,a.rgb.buffer];a.pointIdFilterMap!=null&&e.push(a.pointIdFilterMap.buffer);for(const r of a.attributes)"buffer"in r.values&&D(r.values.buffer)&&r.values.buffer!==a.rgb.buffer&&e.push(r.values.buffer);return Promise.resolve({result:a,transferList:e})}_transform(t){const a=g(t.schema,t.geometryBuffer);let e=a.length/3,r=null;const l=new Array,b=p(t.primaryAttributeData,a,e);t.primaryAttributeData!=null&&b&&l.push({attributeInfo:t.primaryAttributeData.attributeInfo,values:b});const o=p(t.modulationAttributeData,a,e);t.modulationAttributeData!=null&&o&&l.push({attributeInfo:t.modulationAttributeData.attributeInfo,values:o});let n=w(t.rendererInfo,b,o,e);if(t.filterInfo&&t.filterInfo.length>0&&t.filterAttributesData!=null){const f=t.filterAttributesData.filter(v).map(i=>{const u=p(i,a,e),c={attributeInfo:i.attributeInfo,values:u};return l.push(c),c});r=new Uint32Array(e),e=S(a,n,r,t.filterInfo,f)}for(const f of t.userAttributesData){const i=p(f,a,e);l.push({attributeInfo:f.attributeInfo,values:i})}3*e<n.length&&(n=new Uint8Array(n.buffer.slice(0,3*e))),this._applyElevationOffsetInPlace(a,e,t.elevationOffset);const s=this._transformCoordinates(a,e,d.fromData(t.obbData),m.fromJSON(t.inSR),m.fromJSON(t.outSR));return{obbData:t.obbData,points:s,rgb:n,attributes:l,pointIdFilterMap:r}}_transformCoordinates(t,a,e,r,l){if(!$(t,r,0,t,l,0,a))throw new Error("Can't reproject");const b=h(e.center),o=I(),n=I(),s=h(e.halfSize);y(A,e.quaternion);const f=new Float32Array(3*a);for(let i=0;i<a;i++){let u=3*i;o[0]=t[u]-b[0],o[1]=t[u+1]-b[1],o[2]=t[u+2]-b[2],M(n,o,A),s[0]=Math.max(s[0],Math.abs(n[0])),s[1]=Math.max(s[1],Math.abs(n[1])),s[2]=Math.max(s[2],Math.abs(n[2])),f[u++]=o[0],f[u++]=o[1],f[u]=o[2]}return e.halfSize=s,f}_applyElevationOffsetInPlace(t,a,e){if(e!==0)for(let r=0;r<a;r++)t[3*r+2]+=e}}const A=O();function C(){return new _}export{C as default};
