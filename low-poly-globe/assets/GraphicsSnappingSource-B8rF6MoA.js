import{S as v,h as S,P as y,fi as w,d as k,z as b,fk as E,bo as c,m as F,ed as C,j as P,fl as m,H as $,cu as H,dH as I,dM as A,ee as G,dE as R,al as O,e as a,y as l,c as x,fj as z,fm as Z}from"./index-O3Mu8AMX.js";import{t as M,f as L,y as W}from"./DimensionAnalysisView3D-B9qmUWKj.js";import{a as j}from"./normalizeUtilsSync-DKtSpvBI.js";import{m as q}from"./FeatureStore-CgyuIkqo.js";import{$ as J}from"./QueryEngine-PNZsNToZ.js";import{a as N,o as T}from"./queryEngineUtils-BDLBFHiO.js";import{i as g,r as U,n as _}from"./symbologySnappingCandidates-BOmjhpOx.js";import"./LineVisualElement-CFA_yiN0.js";import"./LengthDimension-BTCughYw.js";import"./Segment-B4LcIN-4.js";import"./unitFormatUtils-BBi1KHyb.js";import"./geometryEngine-5DT1_oN4.js";import"./geometryEngineBase-Bc2ESXYb.js";import"./hydrated-rTNDlpsd.js";import"./RightAngleQuadVisualElement-oczsdHEs.js";import"./ShadedColorMaterial.glsl-0E4beRx6.js";import"./ToolIntersector-C9oa6zms.js";import"./ImageMaterial.glsl-DtyynWhH.js";import"./vec4f32-CjrfB-0a.js";import"./Laserlines.glsl-BBfuLAaJ.js";import"./EditGeometryOperations-CKPFXjtW.js";import"./FeatureFilter-8HG2xPNt.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./dehydratedFeatureComparison-BTRf2zT_.js";import"./BoundsStore-Crj31uaQ.js";import"./PooledRBush-BaGLuwa_.js";import"./quickselect-GuQm3B0S.js";import"./optimizedFeatureQueryEngineAdapter-C_PmEkYY.js";import"./WhereClause-CCygtHvR.js";import"./TimeOnly-B4e_dNOM.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-6vCjTrDF.js";import"./utils-Bi1l44LZ.js";import"./utils-CTIKZLAs.js";import"./ClassBreaksDefinition-DUnLJxly.js";import"./VertexSnappingCandidate-AHL0PvBq.js";const f="graphics-collections";let r=class extends v{get updating(){return this._updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return g();const o=async(s,n)=>(await z(e.whenLayerView(t),n)).elevationAlignPointsInFeatures(s,n);return g(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:o})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return U(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&o?_(o,async(s,n)=>{const p=await e.whenLayerView(t);return c(n),p.queryForSymbologySnapping({candidates:s,spatialReference:e.spatialReference},n)}):_()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new S,this._memoizedMakeGetGroundElevation=M(T)}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(f);for(const o of i)this._addMany(o.graphics.toArray()),this.addHandles([o.on("graphic-update",s=>this._onGraphicUpdate(s)),this._updatingHandles.addOnCollectionChange(()=>o.graphics,s=>this._onGraphicsChanged(s))],f)},y);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&e.elevationProvider&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{w(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),k(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),y),b(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i,coordinateHelper:{spatialReference:o}}=e,s=await E(this._mapSources(d=>this._fetchCandidatesForSource(d,e,t)));c(t);const n=this._memoizedMakeGetGroundElevation(this.view,o),p=s.flat().map(d=>N(d,n));return L(i,p),p}async _fetchCandidatesForSource(e,t,i){var u;const o=W(t,((u=this.view)==null?void 0:u.type)??"2d"),s=await e.queryEngine.executeQueryForSnapping(o,i);c(i);const n=await this._snappingElevationAligner.alignCandidates(s.candidates,t.coordinateHelper.spatialReference,i);c(i);const p=await this._symbologySnappingFetcher.fetch(n,i);c(i);const d=p.length===0?n:[...n,...p];return this._snappingElevationFilter.filter(o,d)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const o of e)o.geometry!=null&&(this._needsInitializeProjection(o.geometry.spatialReference)?(t.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=F(async n=>{await C(e.map(p=>({source:p,dest:this.spatialReference})),{signal:n}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this._updatingHandles.addPromise(i.promise);const o={task:i,graphics:t},s=()=>Z(this._pendingAdds,o);i.promise.then(s,s),this._pendingAdds.push(o)}_markLoadedSpatialReferences(e){for(const t of e){t.wkid!=null&&this._loadedWkids.add(t.wkid);const i=t.wkt2||t.wkt;i&&this._loadedWkts.add(i)}}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=P.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const o=this._createOptimizedFeature(e.uid,t);o!=null&&(i.featureStore.add(o),m(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){if(e.wkid!=null&&this._loadedWkids.has(e.wkid))return!1;const t=e.wkt2||e.wkt;return(!t||!this._loadedWkts.has(t))&&!$(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=H(j(t),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),s=I(o,this._hasZ,!1);return new A(s,{[h]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=o=>{for(;o.length<3;)o.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(o=>o.forEach(t));break;case"polygon":i.rings.forEach(o=>o.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=G.toJSON(e),i=this._hasZ,o=new q({geometryType:t,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new J({featureStore:o,fieldsIndex:R.fromLayerJSON({fields:[{name:h,type:"esriFieldTypeOID",alias:h}]}),geometryType:t,hasM:!1,hasZ:i,objectIdField:h,spatialReference:this.spatialReference,priority:O.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),m(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:o,multipoint:s}=this._sources,n=[];return t!=null&&n.push(e(t)),i!=null&&n.push(e(i)),o!=null&&n.push(e(o)),s!=null&&n.push(e(s)),n}};a([l()],r.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],r.prototype,"layerSource",void 0),a([l({constructOnly:!0})],r.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],r.prototype,"view",void 0),a([l({readOnly:!0})],r.prototype,"updating",null),a([l({readOnly:!0})],r.prototype,"availability",void 0),a([l()],r.prototype,"_hasZ",null),a([l()],r.prototype,"_snappingElevationAligner",null),a([l()],r.prototype,"_snappingElevationFilter",null),a([l()],r.prototype,"_symbologySnappingFetcher",null),a([l()],r.prototype,"_extrudedPolygonSymbolsCount",void 0),r=a([x("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],r);const h="OBJECTID";export{r as GraphicsSnappingSource};
