import{e as t,y as a,c5 as m,c,S as u,c6 as p,c7 as b,c8 as d}from"./index-BqO8XNEn.js";import{n as h}from"./floorFilterUtils-DZ5C6FQv.js";const g={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let r=class extends u{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(s=>{const y=h(this.floors,s);return s.toExportImageJSON(y)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&p(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",s=>this.notifyChange(g[s.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(s=>s.id).join(","):"show:-1":null}get layerDefs(){var y;const e=!!((y=this.floors)!=null&&y.length),s=this.visibleSublayers.filter(l=>l.definitionExpression!=null||e&&l.floorInfo!=null);return s.length?JSON.stringify(s.reduce((l,n)=>{const i=h(this.floors,n),o=b(i,n.definitionExpression);return o!=null&&(l[n.id]=o),l},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers"),this.commitProperty("timeExtent");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const s=this.layer.sublayers,y=this.scale,l=i=>{i.visible&&(y===0||d(y,i.minScale,i.maxScale))&&(i.sublayers?i.sublayers.forEach(l):e.unshift(i))};s&&s.forEach(l);const n=this._get("visibleSublayers");return!n||n.length!==e.length||n.some((i,o)=>e[o]!==i)?e:n}toJSON(){const e=this.layer;let s={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?s.dynamicLayers=this.dynamicLayers:s={...s,layers:this.layers,layerDefs:this.layerDefs},s}};t([a({readOnly:!0})],r.prototype,"dynamicLayers",null),t([a()],r.prototype,"floors",void 0),t([a({readOnly:!0})],r.prototype,"hasDynamicLayers",null),t([a()],r.prototype,"layer",null),t([a({readOnly:!0})],r.prototype,"layers",null),t([a({readOnly:!0})],r.prototype,"layerDefs",null),t([a({type:Number})],r.prototype,"scale",void 0),t([a(m)],r.prototype,"timeExtent",void 0),t([a({readOnly:!0})],r.prototype,"version",null),t([a({readOnly:!0})],r.prototype,"visibleSublayers",null),r=t([c("esri.layers.mixins.ExportImageParameters")],r);export{r as m};
